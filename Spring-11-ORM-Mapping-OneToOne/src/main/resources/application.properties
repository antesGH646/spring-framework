################################################################

##working with h2 (connecting application with JDBC h2 database)

##defining url and credentials
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.username=sa
#spring.datasource.password=

##defining the database driver type
#spring.datasource.driver-class-name=org.h2.Driver

##defining the database queries type
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

##configuring to show the logs on the console
#spring.jpa.show-sql=true

##defining the browser endpoint
#spring.h2.console.path=/h2.console

##defining to display the H2 console
#spring.h2.console.enabled=true

################################################################

#working with postgres (connecting application with postgres):

# defining url and credentials in order to connect with the postgres database
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=

spring.jpa.show-sql=true

#configuring to use postgres sql queries
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

#to read and execute sql files under the resources package
# when creating tables using sql, it 1st executes the data file
#spring.sql.init.mode=always

#creating tables from annotated (@Entity and @Id, etc) java class objects when using hibernate
#create drops an existing table and recreates it
spring.jpa.hibernate.ddl-auto=create

#creating tables using hibernate way, updates the existing tables without dropping them
#spring.jpa.hibernate.ddl-auto=update

#directs Spring first to execute the entities, then execute the data.sql, so execution does not fail
spring.jpa.defer-datasource-initialization=true


################################################################################################

