- What ever classes that interact with the data base are placed
   in the entity/model package. The classes cannot be final, because they are
   intended to be extended. They have also @Entity annotation on the class level.
   Every table must has a primary key with @Id annotation on the field level.

- What ever classes that interact with the UI or API are placed in the DTO package.

- you may either create data and save it to the database using DAO pattern (creating interfaces, implementing classes,
    and data generator classes) or use JPA repository from spring boot (you just inherit it, no need to create methods, it
    has all the methods that you might think of or need, if you need more you may add custom methods)
   JPA repository replace all the process of defining service interfaces and their implementations.
   JpaRepository interface accepts two parameters the table name and the primary key type for example,
    ... extends JpaRepository<Car, Long>
   To simply use/call the existing defined methods just inject your child interface into your data generator class.

- creating of tables from POJO classes is configured in the properties file. There are two ways to
  create tables.
    - First by executing sql files under the resources package plus "spring.sql.init.mode=always"
      properties file configurations.
    - Second creating tables from annotated (@Entity and @Id, etc) Java class objects when using hibernate
      plus "spring.jpa.---" properties file configurations.
    Note that:
     - First Need to add the spring-boot-starter-data-jpa and postgresql dependencies in the pom.xml
     - Spring first executes the data sql file to create tables, then the entity configurations. To avoid failures
       you may either comment the spring.sql.init.mode=always configuration or add the
       spring.jpa.defer-datasource-initialization=true configuration to execute the entities first

