There are two types of Spring Containers. These are the BeanFactory and the ApplicationContext.
In this framework I am using the ApplicationContext. ApplicationContext is a container of beans
for the implementing  classes. You don't actually need to create objects for every implementing
class. Therefore, you configure or tell the context or the container to create and manage objects
or beans from the implementing classes. Let’s say you have 1000 implementing classes, you tell the
container to create and manage objects out of these classes. The place to tell or write your
directing codes is inside the Configuration class. Usually, they are named as “nameConfig”.
These classes have the @Configuration annotation on the class level. You tell the Spring Container
usually called context through annotations in the Config file. There are two ways to tell the Spring
Container (configure) either through @Bean annotations for the classes that you cannot edit or through
stereotype annotations for the classes that you can edit. @Bean annotations are placed on method level.
 There two types of stereotypes annotations. The @Component annotation is placed on the class level for
 the classes that you want to create object/beans. The @ComponentScan annotation is placed on the class
  level in the Configuration class to tell the Spring Container to look and find or scan inside the same
  package for classes that have the @Component annotation on the class level.  Note that, the stereotype
   annotations are placed on class level.
Flow:
    1) Create classes that do specific tasks, if you want to use the method from the implementing class
     put @Component annotation on the class level
    2)Create a Config file that has both the @Configuration. If you are using the stereotype annotation
     add @ConfigurationScan annotation on the class level, but if you are using the beans annotation add
     the @Bean annotation at the methods that return the Class objects.
    3) Create a runner class, create the context, pass the class name into the getBean(className.class)
      method then you can call whatever method you want

