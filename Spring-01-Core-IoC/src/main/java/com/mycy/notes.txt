There are two types of Spring Containers. These are the BeanFactory and the ApplicationContext.
In this framework I am using the ApplicationContext. ApplicationContext is a container of beans
for the implementing  classes. You don't actually need to create objects for every implementing
class. Therefore, configure or tell the context/container to create and manage objects
or beans from the implementing classes. Let’s say you have 1000 implementing classes, tell the
container to create and manage objects out of these classes. The place to tell or write your
directing codes is inside the Configuration class. Usually, they are named as “nameConfig”.
These classes have the @Configuration annotation on the class level. You tell the Spring Container
usually called context through annotations in the Config file. There are two ways to tell the Spring
Container (or two ways to configure the context) either through @Bean annotations for the classes
that you cannot edit or through the stereotype annotations for the classes that you can edit or
the classes that created. @Bean annotations are placed on method level. There two types of stereotypes
annotations.
The @Component annotation is placed on the class level for  the classes that you want to create object/beans.
Remember that objects created by Spring are called beans. The @ComponentScan annotation is placed on
the class level in the Configuration class to tell the Spring Container where to look and find or scan
for classes that have the @Component annotation on the class level, within the same package.
Note that, the stereotype annotations are placed on class level.
Flow:
    1) Create classes that do specific tasks, if you want to use a method from an implementing class
     put @Component annotation on the class level.
    2)Create a Config file that has both the @Configuration add @ConfigurationScan annotation on
    the class level . If you are using the stereotype annotation place them at the class level, but if you
    are using the beans annotation place them at the method level.
    3) Create a runner class, create the context, pass the class name into the getBean(className.class)
      method, and then you can call whatever method you want.

